给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"
说明：

如果 S 中不存这样的子串，则返回空字符串 ""。
如果 S 中存在这样的子串，我们保证它是唯一的答案。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-window-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public String minWindow(String s, String t) {
        if(s == null || s.length() == 0 || t == null || t.length() == 0){
            return "";
        }
        
        // number of the same character in t
        Map<Character, Integer> numOfChar = new HashMap<Character, Integer>();
        for(int i = 0; i < t.length(); i++){
            char c = t.charAt(i);
            
            if(numOfChar.get(c) == null){
                numOfChar.put(c, 1);
            }
            else{
                numOfChar.put(c, numOfChar.get(c)+1);
            }
        }
        
        // possible start positions of the substring
        List<Integer> startPos = new ArrayList<Integer>();
        // positions of the character of t
        Map<Character, List<Integer>> posOfChar = new HashMap<Character, List<Integer>>();
        
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            
            // c is a char of s
            if(t.indexOf(c) != -1){
                startPos.add(i);
    
                List<Integer> pos = posOfChar.get(c);
                if(pos != null){
                    boolean added = false;
                    // add position ascendingly
                    for(int j = 0; j < pos.size(); j++){
                        if(i <= pos.get(j)){
                            pos.add(j, i);
                            added = true;
                            break;
                        }
                    }
                    if(!added){
                        pos.add(i);
                    }
                }
                else{
                    pos = new ArrayList<Integer>();
                    pos.add(i);
                        
                    posOfChar.put(c, pos);
                }
            }
        }
        
        // if s does not contain all characters in t
        if(posOfChar.size() < numOfChar.size()){
            return "";
        }
        
        int minLength = 0, position = 0;
        // calculate all length of possible substring
        for(int i = 0; i < startPos.size(); i++){
            int startPosition = startPos.get(i);
            
            int length = getMinLength(minLength, startPosition, s.charAt(startPosition), numOfChar, posOfChar);
            if(length > 0){
                minLength = length;
                position = startPosition;
            }
        }
        
        return s.substring(position, position + minLength);
    }
    
    private int getMinLength(int minLength, int startPosition, char startChar, Map<Character, Integer> numOfChar, Map<Character, List<Integer>> posOfChar){
        int endPosition = startPosition;
        
        for(Character c : posOfChar.keySet()){
            List<Integer> pos = posOfChar.get(c);
                
            if(c == startChar){
                int num = numOfChar.get(c) - 1;
                
                // A ... A
                if(num > 0){
                    int i = 0;
                    for( ; i < pos.size(); i++){
                        if(pos.get(i) > startPosition){
                            if(pos.size() - i >= num){
                                if(pos.get(i+num-1) > endPosition){
                                    endPosition = pos.get(i+num-1);
                                    
                                    if(minLength > 0){
                                        if(endPosition - startPosition + 1 >= minLength){
                                            return 0;
                                        }
                                    }
                                }
                                break;
                            }
                            else{
                                return 0;
                            }
                        }
                    }
                    
                    if(i == pos.size()){
                        return 0;
                    }
                }
            }
            else{
                int num = numOfChar.get(c);
                
                int i = 0;
                for( ; i < pos.size(); i++){
                    if(pos.get(i) > startPosition){
                        if(pos.size() - i >= num){
                            if(pos.get(i+num-1) > endPosition){
                                endPosition = pos.get(i+num-1);
                                
                                if(minLength > 0){
                                    if(endPosition - startPosition + 1 >= minLength){
                                        return 0;
                                    } 
                                }
                                
                            }
                            break;
                        }
                        else{
                            return 0;
                        }
                    }
                }
                
                if(i == pos.size()){
                    return 0;
                }
            }
        }
        
        return endPosition - startPosition + 1;
    }
}
