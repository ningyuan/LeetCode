在一个整数数组中，“峰”是大于或等于相邻整数的元素，相应地，“谷”是小于或等于相邻整数的元素。例如，在数组{5, 8, 6, 2, 3, 4, 6}中，{8, 6}是峰， 
{5, 2}是谷。现在给定一个整数数组，将该数组按峰与谷的交替顺序排序。

示例:

输入: [5, 3, 1, 2, 3]
输出: [5, 1, 3, 2, 3]
提示：

nums.length <= 10000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/peaks-and-valleys-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public void wiggleSort(int[] nums) {
        if(nums == null || nums.length < 2){
            return;
        }
        
        boolean greater = false;
        for(int i = 1; i < nums.length; i++){
            if(greater){
                // [4, 5, 3] -> [5, 4, 3]
                if(nums[i-1] < nums[i]){
                    exchange(nums, i-1, i);
                }
                else if(nums[i-1] == nums[i]){
                    int index = getFirstIndexOf(nums, i+1, nums[i]);
                    
                    // all num left are the same
                    if(index == -1){
                        return;
                    }
                    // exchange the num[i] with the first diff value
                    else{
                        exchange(nums, i, index);
                        
                        if(nums[i-1] < nums[i]){
                            exchange(nums, i-1, i);
                        }
                    }
                }
            }
            else{
                // [5, 4, 3] -> [5, 3, 4]
                if(nums[i-1] > nums[i]){
                    exchange(nums, i-1, i);
                }
                else if(nums[i-1] == nums[i]){
                    int index = getFirstIndexOf(nums, i+1, nums[i]);
                    
                    // all num left are the same
                    if(index == -1){
                        return;
                    }
                    // exchange the num[i] with the first diff value
                    else{
                        exchange(nums, i, index);
                        
                        if(nums[i-1] > nums[i]){
                            exchange(nums, i-1, i);
                        }
                    }
                }
            }
            
            greater = !greater;
        }
    }
    
    private int getFirstIndexOf(int[] nums, int i, int num){
        for( ; i < nums.length; i++){
            if(nums[i] != num){
                return i;
            }
        }
        
        return -1;
    }
    
    private void exchange(int[] nums, int i, int j){
            //System.out.println("exchange nums["+i+"]: "+nums[i]+" nums["+j+"]: "+nums[j]);
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
