Given a sorted array of n integers that has been rotated an unknown number of times, write code to find an element in the array. 
You may assume that the array was originally sorted in increasing order. If there are more than one target elements in the array, 
return the smallest index.

Example1:

Input: arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 5
Output: 8 (the index of 5 in the array)
Example2:

Input: arr = [15, 16, 19, 20, 25, 1, 3, 4, 5, 7, 10, 14], target = 11
Output: -1 (not found)
Note:

1 <= arr.length <= 1000000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-rotate-array-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int search(int[] arr, int target) {
        if(arr == null || arr.length == 0){
            return -1;
        }
        
        return searchHelper(arr, 0, arr.length-1, target);
    }
    
    private int searchHelper(int[] arr, int l, int r, int target){
        if(l == r){
            if(arr[l] == target){
                return l;
            }
            else{
                return -1;
            }
        }
        else if(l < r){
            int m = l + (r-l)/2;
            
            if(arr[m] > target){
                if(arr[m] >= arr[l]){
                    // 1...2...3
                    if(arr[m] <= arr[r]){
                        return searchHelper(arr, l, m-1, target);
                    }
                    // 2...3...1
                    else{
                        int t1 = -1;
                        if(arr[l] <= target){
                            t1 = searchHelper(arr, l, m-1, target);
                        }
                        
                        int t2 = searchHelper(arr, m+1, r, target);
                        
                        if(t1 != -1){
                            return t1;
                        }
                        else{
                            return t2;
                        }
                    }
                }
                else{
                    // 3...1...2
                    return searchHelper(arr, l, m-1, target);
                }
            }
            else if(arr[m] < target){
                if(arr[m] >= arr[l]){
                    // 1...2...3
                    if(arr[m] <= arr[r]){
                        return searchHelper(arr, m+1, r, target);
                    }
                    // 2...3...1
                    else{
                        return searchHelper(arr, m+1, r, target);
                    }
                }
                else{
                    // 3...1...2
                    int t1 = searchHelper(arr, l, m-1, target);
                    
                    int t2 = -1;
                    if(arr[r] >= target){
                        t2 = searchHelper(arr, m+1, r, target);
                    }
                    
                    if(t1 != -1){
                        return t1;
                    }
                    else{
                        return t2;
                    }
                }
            }
            else{
                int t1 = searchHelper(arr, l, m-1, target);
                        
                if(t1 != -1){
                    return t1;
                }
                else{
                    return m;
                }
            }
        }
        else{
            return -1;
        }
    }
}
