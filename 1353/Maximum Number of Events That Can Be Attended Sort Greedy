Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. Notice that you can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4
Example 3:

Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]
Output: 4
Example 4:

Input: events = [[1,100000]]
Output: 1
Example 5:

Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]
Output: 7
 

Constraints:

1 <= events.length <= 10^5
events[i].length == 2
1 <= events[i][0] <= events[i][1] <= 10^5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/maximum-number-of-events-that-can-be-attended
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int maxEvents(int[][] events) {
        
        /*
         *  sort the events first by end day ascending
         *  then by start day ascending
         *
         *    [2]
         *    [2,3]
         *  [1,2,3,4]
         *    [2,3,4]
         *    [2,3,4,5]
         */
        Arrays.sort(events, new Comparator<int[]>(){
            @Override
            public int compare(int[] a1, int[] a2){
                if(a1[1] == a2[1]){
                    return a1[0] - a2[0];
                }
                else{
                    return a1[1] - a2[1];
                }
            }
        });
        
        /* 
         * greedy algorithm
         * take part in the earliest meeting which ends also earliest in the possible day
         *
         */
        Set<Integer> days = new HashSet<Integer>();
        int day = 1;
        for(int i = 0; i < events.length; i++){
            int[] event = events[i];
            
            // day 3  [4,5]
            if(day < event[0]){
                days.add(event[0]);
                day = event[0] + 1;
                
            }
            // day 3  [1,5]
            else if(day <= event[1]){
                for(int j = event[0]; j <= day; j++){
                    if(!days.contains(j)){
                        days.add(j);
                        
                        if(j == day){
                            day++;
                        }
                        
                        break;
                    }
                }
            }
            // day 3 [1,2]
            else{
                for(int j = event[0]; j <= event[1]; j++){
                    if(!days.contains(j)){
                        days.add(j);
                    
                        break;
                    }
                }
            }
        }
        
        return days.size();
    }
}
