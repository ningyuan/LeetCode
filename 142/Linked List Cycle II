给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

说明：不允许修改给定的链表。

 

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：tail connects to node index 1
解释：链表中有一个环，其尾部连接到第二个节点。


示例 2：

输入：head = [1,2], pos = 0
输出：tail connects to node index 0
解释：链表中有一个环，其尾部连接到第一个节点。


示例 3：

输入：head = [1], pos = -1
输出：no cycle
解释：链表中没有环。


来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-cycle-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null){
            return null;
        }
        
        ListNode slow = head, fast = head.next;
        boolean hasCycle = true;
        
        // test if there is a cycle
        while(slow != fast){
            if(fast == null || fast.next == null){
                hasCycle = false;
                break;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        
        if(hasCycle){
            int numInCyc = 1;
            slow = head.next;
            fast = head.next.next;
            while(slow != fast){
                slow = slow.next;
                fast = fast.next.next;
                
                numInCyc++;
            }
    
            int startIndex = 0, index = 0;
            // find the first node which has the min steps in cycle
            ListNode nextHead = head;
            while(true){
                nextHead = nextHead.next;
                index++;
                slow = nextHead.next;
                fast = nextHead.next.next;
                    //System.out.println("head: "+index+" "+nextHead.val);
                int cnt = 1;
                while(slow != fast){
                    slow = slow.next;
                    fast = fast.next.next;
                    
                    cnt++;
                }
                
                if(cnt < numInCyc){
                    numInCyc = cnt;
                    startIndex = index;
                        //System.out.println("num in cycle: "+numInCyc);
                }
                else{
                    startIndex = index-1;
                        //System.out.println("num in cycle: "+numInCyc);
                    break;
                }
            }
                //System.out.println("num in cyc: "+numInCyc+" start index: "+startIndex);
            nextHead = head;
            while(startIndex > 0){
                nextHead = nextHead.next;
                startIndex--;
            }
            
            // find the first node which after going min steps gets back to it self
            while(true){
                ListNode l1 = nextHead, l2 = nextHead;
                for(int i = 0; i < numInCyc; i++){
                    l2 = l2.next;
                }
                
                if(l1 == l2){
                    return l1;
                }
                else{
                    nextHead = nextHead.next;
                }
            }
        }
        else{
            return null;
        }
    }
}
