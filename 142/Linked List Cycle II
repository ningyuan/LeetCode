Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) 
in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


Follow-up:
Can you solve it without using extra space?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/linked-list-cycle-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null){
            return null;
        }
        
        ListNode slow = head, fast = head.next;
        boolean hasCycle = true;
        
        // test if there is a cycle
        while(slow != fast){
            if(fast == null || fast.next == null){
                hasCycle = false;
                break;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        
        if(hasCycle){
            int numInCyc = 1;
            slow = head.next;
            fast = head.next.next;
            while(slow != fast){
                slow = slow.next;
                fast = fast.next.next;
                
                numInCyc++;
            }
    
            int startIndex = 0, index = 0;
            // find the first node which has the min steps in cycle
            ListNode nextHead = head;
            while(true){
                nextHead = nextHead.next;
                index++;
                slow = nextHead.next;
                fast = nextHead.next.next;
                    //System.out.println("head: "+index+" "+nextHead.val);
                int cnt = 1;
                while(slow != fast){
                    slow = slow.next;
                    fast = fast.next.next;
                    
                    cnt++;
                }
                
                if(cnt < numInCyc){
                    numInCyc = cnt;
                    startIndex = index;
                        //System.out.println("num in cycle: "+numInCyc);
                }
                else{
                    startIndex = index-1;
                        //System.out.println("num in cycle: "+numInCyc);
                    break;
                }
            }
                //System.out.println("num in cyc: "+numInCyc+" start index: "+startIndex);
            nextHead = head;
            while(startIndex > 0){
                nextHead = nextHead.next;
                startIndex--;
            }
            
            // find the first node which after going min steps gets back to it self
            while(true){
                ListNode l1 = nextHead, l2 = nextHead;
                for(int i = 0; i < numInCyc; i++){
                    l2 = l2.next;
                }
                
                if(l1 == l2){
                    return l1;
                }
                else{
                    nextHead = nextHead.next;
                }
            }
        }
        else{
            return null;
        }
    }
}
