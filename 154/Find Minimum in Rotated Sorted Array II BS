Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1
Example 2:

Input: [2,2,2,0,1]
Output: 0
Note:

This is a follow up problem to Find Minimum in Rotated Sorted Array.
Would allow duplicates affect the run-time complexity? How and why?

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int findMin(int[] nums) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        
        return findMinHelper(nums, 0, nums.length-1);
    }
    
    private int findMinHelper(int[] nums, int l, int r){
        if(l == r){
            return nums[l];
        }
        else if(l < r){
            int m = l + (r-l)/2;
            
            if(nums[m] > nums[l]){
                // 1...m 2...3
                if(nums[m] <= nums[r]){
                    return nums[l];
                }
                // 2...m 3...1
                else{
                    return findMinHelper(nums, m+1, r);
                }
            }
            else if(nums[m] == nums[l]){
                // 2...m 2...1...3
                if(nums[m] < nums[r]){
                    int t = nums[m];
                    int t2 = findMinHelper(nums, m+1, r);
                    
                    return t > t2 ? t2 : t;
                }
                // 2...m 2...1...2
                // 2...1...m 2...2
                else if(nums[m] == nums[r]){
                    int t1 = findMinHelper(nums, l, m);
                    int t2 = findMinHelper(nums, m+1, r);
                    
                    return t1 > t2 ? t2 : t1;
                }
                // 3...m 3...1...2
                else{
                    return findMinHelper(nums, m+1, r);
                }
            }
            else{
                // 3...m 1...2
                return findMinHelper(nums, l, m);
            }
        }
        else{
            return -1;
        }
    }
}
