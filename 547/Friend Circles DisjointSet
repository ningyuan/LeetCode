There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive 
in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend 
of C. And we defined a friend circle is a group of students who are direct or indirect friends.

Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, 
then the ith and jth students are direct friends with each other, otherwise not. And you have to output 
the total number of friend circles among all the students.

Example 1:
Input: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
Output: 2
Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. 
The 2nd student himself is in a friend circle. So return 2.

Example 2:
Input: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]
Output: 1
Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, 
so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.

Note:
N is in range [1,200].
M[i][i] = 1 for all students.
If M[i][j] = 1, then M[j][i] = 1.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/friend-circles
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public int findCircleNum(int[][] M) {
        if(M == null || M.length == 0){
            return 0;
        }
        
        int n = M.length;
        DisjointSet disjointSet = new DisjointSet(n);
        
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                if(M[i][j] == 1){
                    disjointSet.union(i, j);
                }
            }
        }
        
        return disjointSet.getSize();
    }
    
    private static class DisjointSet{
        private int[] parent;
        // the number of elements in set
        private int[] weight;
        // the number of sets
        private int size;
        
        public DisjointSet(int size){
            this.parent = new int[size];
            this.weight = new int[size];
            this.size = size;
            
            for (int i = 0; i < size; i++) {
                parent[i] = i;
                weight[i] = 1;
            }
        }       
        
        public int getSize(){
            return size;
        }
            
        public int find(int element){
            while(element != parent[element]){
                // compress the path to the root element
                parent[element] = parent[parent[element]];
                element = parent[element];
            }
            
            return element;
        }
        
        public boolean isConnected(int firstEle, int secondEle){
            return find(firstEle) == find(secondEle);
        }
        
        public void union(int firstEle, int secondEle){
            int firstRoot = find(firstEle);
            int secondRoot = find(secondEle);
            
            if(firstRoot == secondRoot){
                return;
            }
            else{
                if(weight[firstRoot] > weight[secondRoot]) {
                    parent[secondRoot] = firstRoot;
                    weight[firstRoot] += weight[secondRoot];
                } 
                else {
                    parent[firstRoot] = secondRoot;
                    weight[secondRoot] += weight[firstRoot];
                }
                
                size--;
            }
        }
    }
}
