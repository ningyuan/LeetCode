Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. 
Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. 
For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/decode-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

class Solution {
    public String decodeString(String s) {
        int state = 0;
        StringBuilder ret = new StringBuilder();
        // stack of k
        List<Integer> stack1 = new ArrayList<Integer>();
        stack1.add(1);
        // stack of string
        List<StringBuilder> stack2 = new ArrayList<StringBuilder>();
        stack2.add(ret);
        
        int kStart = 0, kEnd = 1;
        for(int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            
            switch(state){
                case 0:{
                    /*
                     * 1...
                     * ...1
                     */
                    if(Character.isDigit(c)){
                        kStart = i;
                        kEnd = i + 1;
                        
                        state = 1;
                    }
                    /*
                     * a...
                     * ...a
                     */
                    else if(Character.isLetter(c)){
                        
                        StringBuilder sb = stack2.get(stack2.size()-1);
                        sb.append(c);
                            //System.out.println("append current string "+sb.toString());
                    }
                    /*
                     * [...
                     * ...a[
                     * ...][
                     */
                    else if(c == '['){
                        state = 2;
                    }
                    /*
                     * ]...
                     * ...]
                     */
                    else if(c == ']'){
                        if(stack1.size() > 2){
                            int k = stack1.remove(stack1.size()-1);
                            StringBuilder sb = stack2.remove(stack2.size()-1);
                                //System.out.println("pop "+k);
                                //System.out.println("pop string builder "+sb.toString());
                            
                            String appS = sb.toString();
                            for(int j = 1; j <= k-1; j++){
                                sb.append(appS);
                            }
                                
                            stack2.get(stack2.size()-1).append(sb.toString());
                                //System.out.println("append "+stack2.get(stack2.size()-1));
                            
                        }
                        // stack1.size() == 2
                        else{
                            int k = stack1.remove(stack1.size()-1);
                            StringBuilder sb = stack2.remove(stack2.size()-1);
                                
                                //System.out.println("pop "+k);
                                //System.out.println("pop string builder "+sb.toString());
                            
                            String appS = sb.toString();
                            for(int j = 1; j <= k-1; j++){
                                sb.append(appS);
                            }
                                //System.out.println("append "+sb.toString());
                            
                            stack2.get(0).append(sb);
                            
                        }
                    }
                    
                    break;
                }
                // 1...
                case 1:{
                    // 12...
                    if(Character.isDigit(c)){
                        kEnd++;
                    }
                    // 1[...
                    else if(c == '['){
                        stack1.add(Integer.parseInt(s.substring(kStart, kEnd)));
                        stack2.add(new StringBuilder());
                            //System.out.println("push "+Integer.parseInt(s.substring(kStart, kEnd)));
                            //System.out.println("push new string builder");
                        state = 0;
                    }
                    break;
                }
                case 2:{
                    /*
                     * ...a[...]
                     * ...][...]
                     */
                    if(c == ']'){
                        state = 0;
                    }
                    
                    break;
                }
            }
        }
        
        int k = stack1.remove(0);
        ret = stack2.remove(0);
            //System.out.println("peek "+k);
            //System.out.println("peek string builder "+ret.toString());
        String appS = ret.toString();
        for(int j = 1; j <= k-1; j++){
            ret.append(appS);
        }
            //System.out.println("append "+ret.toString());
        
        
        return ret.toString();
    }
}
